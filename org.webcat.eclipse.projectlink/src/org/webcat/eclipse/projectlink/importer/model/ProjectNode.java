/*==========================================================================*\
 |  Copyright (C) 2012 Virginia Tech
 |
 |  This file is part of Web-CAT Eclipse Plugins.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License along
 |  with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package org.webcat.eclipse.projectlink.importer.model;

import java.io.IOException;

import org.w3c.dom.Node;
import org.webcat.eclipse.projectlink.util.IndentingWriter;

// -------------------------------------------------------------------------
/**
 * Represents a single project in the import definition tree. A project is an
 * actionable object to which projects can be imported.
 *
 * @author Ellen Boyd
 * @version Jan 22, 2012
 */
public class ProjectNode extends ImportNode
{
	//~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Create a new ProjectTarget object.
     * 
     * @param parent
     */
    public ProjectNode(ImportNode parent)
    {
        super(parent);
    }

    
    //~ Methods ...............................................................

    // ----------------------------------------------------------
    @Override
    public boolean isContainer()
    {
        return false;
    }


    // ----------------------------------------------------------
    @Override
    public boolean isNested()
    {
        return true;
    }


    // ----------------------------------------------------------
    @Override
    public boolean isDownloadable()
    {
        return true;
    }


    // ----------------------------------------------------------
    @Override
    public boolean isLoaded()
    {
        return true;
    }


    // ----------------------------------------------------------
    /**
     * Returns the uri for a given target.
     * 
     * @return uri the URI
     */
    public String getURI()
    {
        return uri;
    }


    // ----------------------------------------------------------
    /**
     * The particular host uri for this project.
     *
     * @param uri
     */
    public void setURI(String uri)
    {
        this.uri = uri;
    }

    
    // ----------------------------------------------------------
    /**
     * Unique id generated by webcat.
     * 
     * @return the id
     */
    public String getID()
    {
        return id;
    }

    
    // ----------------------------------------------------------
    /**
     * Sets the id.
     * 
     * @param id
     */
    public void setID(String id)
    {
        this.id = id;
    }

    
    // ----------------------------------------------------------
    /**
     * Gets the project dependencies.
     * 
     * @return a String containing the project's depend
     */
    public String[] getDependencies()
    {
        return depends;
    }

    
    // ----------------------------------------------------------
    /**
     * Sets the dependencies for a project.
     * 
     * @param depends
     */
    public void setDependencies(String[] depends)
    {
       this.depends = depends;
    }


    // ----------------------------------------------------------
    /**
     * Gets the project dependencies.
     * 
     * @return a String containing the project's depend
     */
    public ProjectNode[] getNodeDependencies()
    {
    	String[] ids = getDependencies();    	
    	ProjectNode[] nodes = new ProjectNode[ids.length];
    	
    	for (int i = 0; i < ids.length; i++)
    	{
    		nodes[i] = getRoot().getProjectNode(ids[i]);
    	}

        return nodes;
    }

    
    // ----------------------------------------------------------
    @Override
    public void parse(Node parentNode)
    {
        parseCommonAttributes(parentNode);

        String uriValue = getAttribute(Xml.Attributes.URI);
        String idValue = getAttribute(Xml.Attributes.ID);
        String dependsValue = getAttribute(Xml.Attributes.DEPENDS);

        if (uriValue != null)
        {
            setURI(uriValue);
        }

        if (idValue != null)
        {
            setID(idValue);
        }

        if (dependsValue != null)
        {
        	setDependencies(dependsValue.split("\\s*,\\s*"));
        }
        else
        {
        	setDependencies(new String[0]);
        }

        getRoot().addProjectNode(this);
    }
	
	
	// ----------------------------------------------------------
	@Override
	protected void writeIndented(IndentingWriter writer) throws IOException
	{
		writer.write("<project");
		writer.write(" name=\"");
		writer.writeEscaped(getName());
		writer.write("\"");
		
		if (getID() != null)
		{
			writer.write(" id=\"");
			writer.writeEscaped(getID());
			writer.write("\"");
		}
		
		if (depends != null && depends.length > 0)
		{
			writer.write(" depends=\"");
			writer.writeEscaped(join(depends));
			writer.write("\"");
		}

		if (getURI() != null)
		{
			writer.write(" uri=\"");
			writer.writeEscaped(getURI());
			writer.write("\"");
		}
		
		writeAvailability(writer);
		
		writer.write("/>\n");		
	}
	

	// ----------------------------------------------------------
	private String join(String[] array)
	{
		StringBuffer buffer = new StringBuffer();

		for (int i = 0; i < array.length; i++)
		{
			buffer.append(array[i]);
			
			if (i < array.length - 1)
			{
				buffer.append(' ');
			}
		}

		return buffer.toString();
	}


	//~ Instance/static variables .............................................

    /* Unique id number for the given project */
    private String id;

    /* URI the uri for the given project */
    private String uri;

    /* Array of dependencies */
    private String[] depends;
}
